// Code generated by counterfeiter. DO NOT EDIT.
package authfakes

import (
	"sync"

	"github.com/concourse/concourse/atc/api/auth"
)

type FakeDefaultBadgeVisibilityFactory struct {
	NewDefaultBadgeVisibilityStub        func() auth.DefaultBadgeVisibility
	newDefaultBadgeVisibilityMutex       sync.RWMutex
	newDefaultBadgeVisibilityArgsForCall []struct {
	}
	newDefaultBadgeVisibilityReturns struct {
		result1 auth.DefaultBadgeVisibility
	}
	newDefaultBadgeVisibilityReturnsOnCall map[int]struct {
		result1 auth.DefaultBadgeVisibility
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDefaultBadgeVisibilityFactory) NewDefaultBadgeVisibility() auth.DefaultBadgeVisibility {
	fake.newDefaultBadgeVisibilityMutex.Lock()
	ret, specificReturn := fake.newDefaultBadgeVisibilityReturnsOnCall[len(fake.newDefaultBadgeVisibilityArgsForCall)]
	fake.newDefaultBadgeVisibilityArgsForCall = append(fake.newDefaultBadgeVisibilityArgsForCall, struct {
	}{})
	fake.recordInvocation("NewDefaultBadgeVisibility", []interface{}{})
	fake.newDefaultBadgeVisibilityMutex.Unlock()
	if fake.NewDefaultBadgeVisibilityStub != nil {
		return fake.NewDefaultBadgeVisibilityStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.newDefaultBadgeVisibilityReturns
	return fakeReturns.result1
}

func (fake *FakeDefaultBadgeVisibilityFactory) NewDefaultBadgeVisibilityCallCount() int {
	fake.newDefaultBadgeVisibilityMutex.RLock()
	defer fake.newDefaultBadgeVisibilityMutex.RUnlock()
	return len(fake.newDefaultBadgeVisibilityArgsForCall)
}

func (fake *FakeDefaultBadgeVisibilityFactory) NewDefaultBadgeVisibilityCalls(stub func() auth.DefaultBadgeVisibility) {
	fake.newDefaultBadgeVisibilityMutex.Lock()
	defer fake.newDefaultBadgeVisibilityMutex.Unlock()
	fake.NewDefaultBadgeVisibilityStub = stub
}

func (fake *FakeDefaultBadgeVisibilityFactory) NewDefaultBadgeVisibilityReturns(result1 auth.DefaultBadgeVisibility) {
	fake.newDefaultBadgeVisibilityMutex.Lock()
	defer fake.newDefaultBadgeVisibilityMutex.Unlock()
	fake.NewDefaultBadgeVisibilityStub = nil
	fake.newDefaultBadgeVisibilityReturns = struct {
		result1 auth.DefaultBadgeVisibility
	}{result1}
}

func (fake *FakeDefaultBadgeVisibilityFactory) NewDefaultBadgeVisibilityReturnsOnCall(i int, result1 auth.DefaultBadgeVisibility) {
	fake.newDefaultBadgeVisibilityMutex.Lock()
	defer fake.newDefaultBadgeVisibilityMutex.Unlock()
	fake.NewDefaultBadgeVisibilityStub = nil
	if fake.newDefaultBadgeVisibilityReturnsOnCall == nil {
		fake.newDefaultBadgeVisibilityReturnsOnCall = make(map[int]struct {
			result1 auth.DefaultBadgeVisibility
		})
	}
	fake.newDefaultBadgeVisibilityReturnsOnCall[i] = struct {
		result1 auth.DefaultBadgeVisibility
	}{result1}
}

func (fake *FakeDefaultBadgeVisibilityFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.newDefaultBadgeVisibilityMutex.RLock()
	defer fake.newDefaultBadgeVisibilityMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDefaultBadgeVisibilityFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ auth.DefaultBadgeVisibilityFactory = new(FakeDefaultBadgeVisibilityFactory)
